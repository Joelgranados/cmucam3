// header file containing declaration of parameters and
// functions to be used in face detection


#ifndef MAIN_H
#define MAIN_H

/*----------------------------------------*/
/*          Declaring variables           */
/*----------------------------------------*/

/*------ struct for features--------*/
typedef struct 
{
  uint8_t x[9]; // x-coordinate 
  uint8_t y[9]; // y-coordinate
  int8_t val_at_corners[9]; // value of feature at (x,y)
  int8_t parity;             // parity (+1/-1)
  int16_t thresh;           // threshold for this feature
  int16_t alpha;           // alpha value
} cc3_feature;
/*
Note: Since the max image size is 352x288, the max scale for the features can be 288. 
But we'll never go upto that scale, so declaring (x,y) as uint8_t is sufficient
*/


/*---------- cmucam3 specific-------------*/

const uint16_t CC3_INTEGRAL_IMG_HEIGHT = 61; // height of integral image
const uint16_t CC3_INTEGRAL_IMG_WIDTH = 176; // width of integral image

// the actual image size is 176x144 (low res)
// but for this the integral image doesn't fit into the memory, so 
// dropping off the 
const uint8_t CC3_IMAGE_HEIGHT = 144;        // height of the actual image


const uint8_t top_offset = 12; // discard some top rows from the actual image so that integral image can fit into memory
const uint8_t bottom_offset = 12; // similarly, discard some bottom rows in the actual image
// => the image size that the code sees is CC3_IMAGE_HEIGHT - top_offset - bottom_offset 

//int32_t cc3_integral_image[CC3_INTEGRAL_IMG_HEIGHT][CC3_INTEGRAL_IMG_WIDTH];
uint32_t cc3_integral_image[61][176];

const uint8_t CC3_MAX_FACES = 10;            // max no. of deteced faces allowed
    
// store the location of detected faces, cc3_faces[CC3_MAX_FACES][3]
uint8_t cc3_faces[10][3];  // 2nd dimension-->[x][y][scale]

const uint8_t CC3_NUM_SCALES = 5;            // no. of scales of sub-windows allowed
const uint8_t CC3_SCALES[] = {25, 31, 39, 49, 61}; // array containing different scales  (assuming no. of scales = 5)
const uint8_t CC3_WIN_STEPS[]={2, 2, 4, 6, 8}; // array containing "window step" for each scale


/*----------- face detector specific--------*/
// global threshold (from adaboost) - whether a face or not (NOTE: alphas have been scaled..!!!)
const int16_t CC3_GLOBAL_THRESHOLD = 272;      

const uint8_t CC3_NUM_FEATURES = 9;   // no. of features 

// size-->[CC3_IMAGE_HEIGHT][NUM_SCALES]
const uint8_t cc3_rows_to_eval_feat[120][5] =
{ 
{ 1, 1, 1, 1, 1 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 1, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 1 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 1, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 1 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 1, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 1, 1 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 1, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 1 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 1, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 1 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 1, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 1, 1 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 1, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 1 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 1, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 1, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 1, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 1, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 1, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
{ 0, 0, 0, 0, 0 }, 
 };

/*--------------initializing features-------*/

//    ------> x
//    |
//    | 
// y  v
// dimensions: 1. Number of features 2. Each feature at all the scales

const cc3_feature CC3_FACE_FEATURES[9][5] = { 
{ 
{ {3, 3, 3, 20, 20, 20, 0, 0, 0}, {5, 9, 13, 5, 9, 13, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1,  -11,   62 }, 
{ {4, 4, 4, 25, 25, 25, 0, 0, 0}, {7, 12, 17, 7, 12, 17, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1,  -11,   62 }, 
{ {5, 5, 5, 32, 32, 32, 0, 0, 0}, {9, 15, 21, 9, 15, 21, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1,  -11,   62 }, 
{ {7, 7, 7, 41, 41, 41, 0, 0, 0}, {11, 19, 27, 11, 19, 27, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1,  -11,   62 }, 
{ {9, 9, 9, 52, 52, 52, 0, 0, 0}, {14, 24, 34, 14, 24, 34, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1,  -11,   62 }, 
}, 
{ 
{ {2, 2, 9, 9, 16, 16, 23, 23, 0}, {0, 8, 0, 8, 0, 8, 0, 8, 0}, {1, -1, -3, 3, 3, -3, -1, 1, 0}, 1,  -37,   53 }, 
{ {3, 3, 12, 12, 21, 21, 30, 30, 0}, {0, 10, 0, 10, 0, 10, 0, 10, 0}, {1, -1, -3, 3, 3, -3, -1, 1, 0}, 1,  -37,   53 }, 
{ {4, 4, 15, 15, 26, 26, 37, 37, 0}, {0, 13, 0, 13, 0, 13, 0, 13, 0}, {1, -1, -3, 3, 3, -3, -1, 1, 0}, 1,  -37,   53 }, 
{ {5, 5, 19, 19, 33, 33, 47, 47, 0}, {0, 16, 0, 16, 0, 16, 0, 16, 0}, {1, -1, -3, 3, 3, -3, -1, 1, 0}, 1,  -37,   53 }, 
{ {6, 6, 24, 24, 42, 42, 60, 60, 0}, {0, 20, 0, 20, 0, 20, 0, 20, 0}, {1, -1, -3, 3, 3, -3, -1, 1, 0}, 1,  -37,   53 }, 
}, 
{ 
{ {0, 0, 0, 8, 8, 8, 0, 0, 0}, {0, 4, 8, 0, 4, 8, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1, -5683,   32 }, 
{ {0, 0, 0, 10, 10, 10, 0, 0, 0}, {0, 5, 10, 0, 5, 10, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1, -5683,   32 }, 
{ {0, 0, 0, 13, 13, 13, 0, 0, 0}, {0, 6, 12, 0, 6, 12, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1, -5683,   32 }, 
{ {0, 0, 0, 16, 16, 16, 0, 0, 0}, {0, 8, 16, 0, 8, 16, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1, -5683,   32 }, 
{ {0, 0, 0, 20, 20, 20, 0, 0, 0}, {0, 10, 20, 0, 10, 20, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1, -5683,   32 }, 
}, 
{ 
{ {4, 4, 4, 20, 20, 20, 0, 0, 0}, {10, 14, 18, 10, 14, 18, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, -1,    1,   42 }, 
{ {5, 5, 5, 25, 25, 25, 0, 0, 0}, {13, 18, 23, 13, 18, 23, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, -1,    1,   42 }, 
{ {7, 7, 7, 32, 32, 32, 0, 0, 0}, {16, 22, 28, 16, 22, 28, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, -1,    1,   42 }, 
{ {9, 9, 9, 41, 41, 41, 0, 0, 0}, {21, 29, 37, 21, 29, 37, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, -1,    1,   42 }, 
{ {12, 12, 12, 52, 52, 52, 0, 0, 0}, {27, 37, 47, 27, 37, 47, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, -1,    1,   42 }, 
}, 
{ 
{ {2, 2, 2, 6, 6, 6, 10, 10, 10}, {1, 5, 9, 1, 5, 9, 1, 5, 9}, {1, -2, 1, -2, 4, -2, 1, -2, 1}, 1,   -2,   32 }, 
{ {3, 3, 3, 8, 8, 8, 13, 13, 13}, {2, 7, 12, 2, 7, 12, 2, 7, 12}, {1, -2, 1, -2, 4, -2, 1, -2, 1}, 1,   -2,   32 }, 
{ {4, 4, 4, 10, 10, 10, 16, 16, 16}, {2, 8, 14, 2, 8, 14, 2, 8, 14}, {1, -2, 1, -2, 4, -2, 1, -2, 1}, 1,   -2,   32 }, 
{ {5, 5, 5, 13, 13, 13, 21, 21, 21}, {3, 11, 19, 3, 11, 19, 3, 11, 19}, {1, -2, 1, -2, 4, -2, 1, -2, 1}, 1,   -2,   32 }, 
{ {7, 7, 7, 17, 17, 17, 27, 27, 27}, {4, 14, 24, 4, 14, 24, 4, 14, 24}, {1, -2, 1, -2, 4, -2, 1, -2, 1}, 1,   -2,   32 }, 
}, 
{ 
{ {10, 10, 10, 14, 14, 14, 18, 18, 18}, {5, 10, 15, 5, 10, 15, 5, 10, 15}, {1, -2, 1, -2, 4, -2, 1, -2, 1}, -1,    3,   28 }, 
{ {13, 13, 13, 18, 18, 18, 23, 23, 23}, {7, 13, 19, 7, 13, 19, 7, 13, 19}, {1, -2, 1, -2, 4, -2, 1, -2, 1}, -1,    3,   28 }, 
{ {16, 16, 16, 22, 22, 22, 28, 28, 28}, {9, 17, 25, 9, 17, 25, 9, 17, 25}, {1, -2, 1, -2, 4, -2, 1, -2, 1}, -1,    3,   28 }, 
{ {21, 21, 21, 29, 29, 29, 37, 37, 37}, {11, 21, 31, 11, 21, 31, 11, 21, 31}, {1, -2, 1, -2, 4, -2, 1, -2, 1}, -1,    3,   28 }, 
{ {27, 27, 27, 37, 37, 37, 47, 47, 47}, {14, 27, 40, 14, 27, 40, 14, 27, 40}, {1, -2, 1, -2, 4, -2, 1, -2, 1}, -1,    3,   28 }, 
}, 
{ 
{ {9, 9, 9, 20, 20, 20, 0, 0, 0}, {10, 15, 20, 10, 15, 20, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1,   63,   41 }, 
{ {12, 12, 12, 26, 26, 26, 0, 0, 0}, {13, 19, 25, 13, 19, 25, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1,   63,   41 }, 
{ {15, 15, 15, 32, 32, 32, 0, 0, 0}, {16, 24, 32, 16, 24, 32, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1,   63,   41 }, 
{ {19, 19, 19, 41, 41, 41, 0, 0, 0}, {21, 31, 41, 21, 31, 41, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1,   63,   41 }, 
{ {24, 24, 24, 52, 52, 52, 0, 0, 0}, {27, 40, 53, 27, 40, 53, 0, 0, 0}, {1, -2, 1, -1, 2, -1, 0, 0, 0}, 1,   63,   41 }, 
}, 
{ 
{ {16, 16, 20, 20, 24, 24, 0, 0, 0}, {0, 19, 0, 19, 0, 19, 0, 0, 0}, {1, -1, -2, 2, 1, -1, 0, 0, 0}, -1,   23,   30 }, 
{ {20, 20, 25, 25, 30, 30, 0, 0, 0}, {0, 24, 0, 24, 0, 24, 0, 0, 0}, {1, -1, -2, 2, 1, -1, 0, 0, 0}, -1,   23,   30 }, 
{ {26, 26, 32, 32, 38, 38, 0, 0, 0}, {0, 30, 0, 30, 0, 30, 0, 0, 0}, {1, -1, -2, 2, 1, -1, 0, 0, 0}, -1,   23,   30 }, 
{ {32, 32, 40, 40, 48, 48, 0, 0, 0}, {0, 38, 0, 38, 0, 38, 0, 0, 0}, {1, -1, -2, 2, 1, -1, 0, 0, 0}, -1,   23,   30 }, 
{ {40, 40, 50, 50, 60, 60, 0, 0, 0}, {0, 48, 0, 48, 0, 48, 0, 0, 0}, {1, -1, -2, 2, 1, -1, 0, 0, 0}, -1,   23,   30 }, 
}, 
{ 
{ {11, 11, 14, 14, 17, 17, 20, 20, 0}, {5, 18, 5, 18, 5, 18, 5, 18, 0}, {1, -1, -3, 3, 3, -3, -1, 1, 0}, -1,    2,   25 }, 
{ {14, 14, 18, 18, 22, 22, 26, 26, 0}, {7, 23, 7, 23, 7, 23, 7, 23, 0}, {1, -1, -3, 3, 3, -3, -1, 1, 0}, -1,    2,   25 }, 
{ {18, 18, 23, 23, 28, 28, 33, 33, 0}, {9, 30, 9, 30, 9, 30, 9, 30, 0}, {1, -1, -3, 3, 3, -3, -1, 1, 0}, -1,    2,   25 }, 
{ {23, 23, 29, 29, 35, 35, 41, 41, 0}, {11, 37, 11, 37, 11, 37, 11, 37, 0}, {1, -1, -3, 3, 3, -3, -1, 1, 0}, -1,    2,   25 }, 
{ {29, 29, 37, 37, 45, 45, 53, 53, 0}, {14, 47, 14, 47, 14, 47, 14, 47, 0}, {1, -1, -3, 3, 3, -3, -1, 1, 0}, -1,    2,   25 }, 
}, 
};



/*----------------------------------------*/
/*          Declaring functions           */
/*----------------------------------------*/

/* function to get the current segment from the actual image  */
void cc3_get_curr_segment(void);

/* function to get the integral image for the current segment  */
void cc3_get_integral_image(void);

/* function to get the val of feat for a sub-window */
int16_t cc3_get_feat_val(uint8_t feat_num, uint8_t curr_scale, uint16_t x, uint16_t y);

#endif
